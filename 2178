#include <iostream>
#include <string>
#include <queue>
using namespace std;

int main() {
	bool arr[101][101] = { false };	//배열 기본값 false로
	int path[101][101] = {0};		//배열 기본값 0으로
	int n, m;
	queue <pair<int, int>> q;
	int move[4][2] = { {0,1},{0,-1}, {1,0}, {-1,0} };	//상하좌우

	string num;
	cin >> n >> m;


	for (int i = 0; i < n; i++) {
		cin >> num;
		for (int j = 0; j < m; j++) {
			if (num[j] - '0' == 1)	//값이 1일때
				arr[i][j] = true;
			else
				arr[i][j] = false;		//값이 0일때
		}	
	}
	int x = 0, y = 0;
	q.push(pair<int,int>(x,y));	//while문 조건충족, while문의 x, y 값 초기지정을 위해
	path[x][y] = 1;
	while (q.empty() == false) {
		x = q.front().second;	//큐의 첫번째 요소의 x값
		y = q.front().first;	//큐의 첫번째 요소의 y값
		q.pop();	//x, y 에 값 저장 후 삭제

		for (int i = 0; i < 4; i++) {
			int n_x = x + move[i][0];	//현재좌표에서 위 아래 오른쪽 왼쪽 값
			int n_y = y + move[i][1];
			if ((n_x >= 0 && n_x < m) && (n_y >= 0 && n_y < n)) {	//n_x, n_y 값이 arr배열 안에 있을 때
				if (path[n_y][n_x] < 1) {	// 한번도 안거친 좌표일 때
					if (arr[n_y][n_x]) {	//좌표가 1일 때
						path[n_y][n_x] = path[y][x]+1;	//처음 시작좌표에서부터 몇번 움직이면 오는지 입력
						q.push(pair<int, int>(n_y, n_x));	//큐에 입력
					}
				}
			}
		}
	}
	cout << path[n-1][m-1];
	system("pause");
	return 0;

}
