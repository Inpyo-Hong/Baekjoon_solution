#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

int main() {

	int n,m;
	int min;
	vector<int> v;
	vector<int> v1;

	bool flag[50001] = { false,false }; // 소수:true, 소수X;false
	
	for (int i = 2; i < 50001; i++)	//2부터 끝까지 소수로 가정
		flag[i] = true;

	for (int i = 0; i*i <  50001; i++) {	//소수x인거 false로 바꾸기
		if (flag[i] == true) {	//소수로 가정한것 차례대로 검사
			for (int j = i*i; j <  50001; j += i) //i의 제곱부터 i만큼 더하면 소수x
				flag[j] = false;
		}
	}

	for (int i = 0; i < 50001; i++) {
		if (flag[i] == true)	//소수 벡터에 넣기
			v.push_back(i);
	}

	for (int j = 0; j < v.size(); j++) {	//v1벡터에 소수곱 넣기
		for (int k = 0; k < v.size() / 2; k++) {
			if (j == k)	//같은수 곱할때 (2*2, 3*3, ...)
				continue;
			else if ((v[j] * v[k]) > 100001)  //범위보다 클 때
				break;
			else
				v1.push_back(v[j] * v[k]);
		}
	}

	sort(v1.begin(), v1.end());	//크기순 정렬

	cin >> n;

	for (int i = 0; i < n; i++) {
		cin >> m;

		if (m >= (v1[v1.size() / 2])) {	//v1벡터 절반 크기보다 m이 클때
			for (int j = v1.size() / 2; j < v1.size(); j++) {	//v1벡터 반부터 끝까지
				if (m <= v1[j]) {
					cout << v1[j] << "\n";
					break;
				}
			}
		}
		else {//v1벡터 절반 크기보다 m이 작을때
			for (int j = 0; v1.size() / 2; j++) {//0부터 v1벡터 반까지
				if (m <= v1[j]) {
					cout << v1[j] << "\n";
					break;
				}
			}
		}
	}

	system("pause");
	return 0;
}
